(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{414:function(t,r,s){"use strict";s.r(r);var n=s(12),e=Object(n.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"摘要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#摘要"}},[t._v("#")]),t._v(" 摘要")]),t._v(" "),s("p",[t._v("本文档指定了用于通过中继遍历 NAT（TURN）协议的统一资源标识符（URI）方案的语法。它定义了两个 URI 方案来配置 TURN 解析机制（RFC 5928）。")]),t._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("本文档指定了用于通过中继遍历 NAT（TURN）协议的统一资源标识符（URI）方案的语法和语义。TURN 协议是一种规范，允许 NAT 后面的主机控制中继服务器的操作。中继服务器允许主机与其对等方交换数据包。对等方本身也可能在 NAT 后面。RFC 5766 定义了 TURN 协议的具体规定。")]),t._v(" "),s("p",[t._v("“turn”和“turns”URI 方案用于指定通过 TURN 协议访问的 Internet 主机上的 TURN 服务器（也称为中继）。随着 WebRTC 等标准的出现，我们预计将有大量的端点和 Web 应用程序能够识别和与这样的 TURN 服务器通信，以执行 TURN 协议。这意味着端点和/或应用程序必须配置适当的配置来识别 TURN 服务器。具有不一致的语法会增加歧义，并可能导致不互操作的解决方案和实现限制。 “turn”和“turns”URI 方案通过提供一种一致的方式来描述、配置和交换标识 TURN 服务器的信息，有助于缓解这些问题。")]),t._v(" "),s("p",[t._v("[RFC5928]定义了一种解析机制，将安全标志、主机名或 IP 地址、可能为空的端口和可能为空的传输转换为 IP 地址、端口和 TURN 传输元组列表。")]),t._v(" "),s("p",[t._v("为了简化 TURN 客户端的配置，本文档定义了“turn”和“turns”URI 方案，可以携带解析机制所需的四个组件。")]),t._v(" "),s("h2",{attrs:{id:"turn-和-turns-uri-的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#turn-和-turns-uri-的定义"}},[t._v("#")]),t._v(" ”turn“和”turns“URI 的定义")]),t._v(" "),s("h2",{attrs:{id:"uri-方案语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uri-方案语法"}},[t._v("#")]),t._v(" URI 方案语法")]),t._v(" "),s("p",[t._v("“turn”和“turns”URI 方案用于指定通过 TURN 协议访问的 Internet 主机上的 TURN 服务器（也称为中继）。这些 URI 方案具有以下正式 ABNF 语法[RFC5234]：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('turnURI = scheme ":" host [ ":" port ][ "?transport=" transport ]\nscheme = "turn" / "turns"\ntransport = "udp" / "tcp" /\ntransport-ext transport-ext = 1\\*unreserved\n')])])]),s("p",[t._v("和在[RFC3986]中指定。虽然这两个 ABNF 生成物在[RFC3986]中被定义为通用分层 URI 的组成部分，但这并不意味着“turn”和“turns”URI 方案是分层 URI。开发人员不得使用通用分层 URI 解析器来解析“turn”或“turns”URI。")]),t._v(" "),s("p",[t._v("定义了一种解析机制，将"),s("host",[t._v(", "),s("port",[t._v(", 和 "),s("transport",[t._v("组件转换为 IP 地址、端口和 TURN 传输元组列表。如果"),s("scheme",[t._v("等于“turn”，则"),s("secure",[t._v("设置为 false；如果"),s("scheme",[t._v("等于“turns”，则设置为 true，并将其与其他组件一起传递给[RFC5928]算法。")])],1)],1)],1)],1)],1)],1),t._v(" "),s("h3",{attrs:{id:"uri-方案语义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uri-方案语义"}},[t._v("#")]),t._v(" URI 方案语义")]),t._v(" "),s("p",[t._v("“turn”和“turns”URI 方案用于指定通过 TURN 协议访问的 Internet 主机上的 TURN 服务器（也称为中继）。TURN 协议支持通过 UDP、TCP 或 TLS-over-TCP 发送消息。当 TURN 在 TLS-over-TCP（或将来的 DTLS-over-UDP）上运行时，必须使用“turns”URI 方案，否则必须使用“turn”方案。")]),t._v(" "),s("p",[t._v("“turn”URI 的必需部分表示 TURN 服务器主机。")]),t._v(" "),s("p",[t._v("如[RFC5766]和[RFC5928]所指定，如果存在部分，则表示 TURN 服务器等待连接请求的端口。如果不存在，则 UDP 和 TCP 的默认端口均为 3478。TURN over TLS 的默认端口是 5349。")]),t._v(" "),s("h2",{attrs:{id:"安全考虑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全考虑"}},[t._v("#")]),t._v(" 安全考虑")]),t._v(" "),s("p",[t._v("在某些情况下，例如 WebRTC，用户名和密码几乎肯定会由外部代理在向客户端发送“turns”URI 的同时远程配置。因此，在这种情况下，如果用户名和密码以明文形式接收，则使用“turns”URI 将几乎没有任何好处。因此，TURN 客户端必须确保在使用“turns”URI 之前，用户名、密码、“turns”URI 和任何其他安全相关参数都以等效的安全性接收。如果两个 TLS 会话都以相同的方式参数化，例如使用相应强度的密码套件，则在另一个 TLS 会话上接收这些参数可以提供适当的安全级别。")])])}),[],!1,null,null,null);r.default=e.exports}}]);